# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#
version: "3.8"
services:
  ld-context:
    labels:
      org.fiware: 'tutorial'
    image: httpd:alpine
    hostname: context
    container_name: fiware-ld-context
    ports:
        - "3004:80"
    volumes:
        - data-models:/usr/local/apache2/htdocs/
        - type: bind
          source: ${PWD}/conf/mime.types
          target: /usr/local/apache2/conf/mime.types
          read_only: true
    healthcheck:
      test: (wget --server-response --spider --quiet  http://ld-context/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e "200") || exit 1
  # Orion is an NGSI-LD context broker
  orion-ld:
    labels:
      org.fiware: 'bdataprj'
    image: fiware/orion-ld:1.6.0-PRE-1615
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      default:
        ipv4_address: 172.18.5.19
    expose:
      - "${ORION_PORT}"
    ports:
      - "${ORION_PORT}:1026" # localhost:1026
    #command: -dbhost mongo-db -logLevel DEBUG
    command: -dbhost mongo-db -logLevel DEBUG -forwarding  -experimental
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 15s
    environment:
      - BROKER_LOG_LEVEL=DEBUG

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    labels:
      org.fiware: 'bdataprj'
    image: quay.io/fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      - orion-ld
    networks:
      - default
    expose:
      - ${IOTA_NORTH_PORT}
      - ${IOTA_SOUTH_PORT}
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=ld # use NGSIv2 when sending updates for active attributes
      - IOTA_JSON_LD_CONTEXT=http://context/datamodels.context.jsonld
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
      - IOTA_FALLBACK_TENANT=openiot

    healthcheck:
      interval: 15s


  # Keyrock is an Identity Management Front-End
  keyrock:
    labels:
      org.fiware: 'bdataprj'
    image: quay.io/fiware/idm:${KEYROCK_VERSION}
    container_name: fiware-keyrock
    hostname: keyrock
    networks:
      default:
        ipv4_address: 172.18.5.5
    depends_on:
      - mysql-db
    ports:
      - "${KEYROCK_PORT}:${KEYROCK_PORT}" # localhost:3005
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
      - IDM_DB_PASS_FILE=/run/secrets/my_secret_data
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:${KEYROCK_PORT}
      - IDM_PORT=${KEYROCK_PORT}
      - IDM_HTTPS_ENABLED=${IDM_HTTPS_ENABLED}
      - IDM_HTTPS_PORT=${KEYROCK_HTTPS_PORT}
      - IDM_ADMIN_USER=antonio
      - IDM_ADMIN_EMAIL=antonio-the-admin@test.com
      - IDM_ADMIN_PASS=test
      - IDM_CSP_FORM_ACTION=*
    secrets:
      - my_secret_data
    healthcheck:
      interval: 5s




  # perseo
  perseoc:
    labels:
      org.fiware: 'bdataprj'
    image: telefonicaiot/perseo-core:latest
    container_name: fiware-perseo-core
    hostname: fiware-perseo-core
    depends_on:
      - mongo-db
      - orion-ld
    ports:
      - "${PERSEO_CORE_PORT:-8080}:${PERSEO_CORE_PORT:-8080}"
    environment:
      - "PERSEO_FE_URL=http://fiware-perseo-fe:${PERSEO_ENDPOINT_PORT:-9090}"

  #perseo
  perseofe:
    labels:
      org.fiware: 'bdataprj'
    image: telefonicaiot/perseo-fe:latest
    container_name: fiware-perseo-fe
    hostname: fiware-perseo-fe
    depends_on:
      - perseoc
      - mongo-db
    expose:
      - "${PERSEO_ENDPOINT_PORT:-9090}"
    ports:
      - "${PERSEO_ENDPOINT_PORT:-9090}:${PERSEO_ENDPOINT_PORT:-9090}"
    environment:
      - "PERSEO_CORE_URL=http://fiware-perseo-core:${PERSEO_CORE_PORT:-8080}"
      - "PERSEO_ORION_URL=http://orion:${ORION_PORT}"
      - "PERSEO_MONGO_HOST=mongo-db"
      - "PERSEO_MONGO_ENDPOINT=mongo-db"

  # Databases
  mongo-db:
    labels:
      org.fiware: 'bdataprj'
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data
    healthcheck:
      #test: ["CMD","mongosh", "--eval", "\"db.adminCommand('ping')\""]
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1    
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Databases
  # mongo-pe-db:
  #   labels:
  #     org.fiware: 'bdataprj'
  #   image: mongo:${MONGO_DB_VERSION}
  #   hostname: mongo-pe-db
  #   container_name: db-mongo-pe
  #   expose:
  #     - "${MONGO_DB_PE_PORT}"
  #   ports:
  #     - "${MONGO_DB_PE_PORT}:${MONGO_DB_PE_PORT}" # localhost:27018
  #   networks:
  #     - default
  #   volumes:
  #     - mongo-pe-db:/data
  #   healthcheck:
  #     test: ["CMD","mongosh", "--eval", "\"db.adminCommand('ping')\""]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s

  mysql-db:
    restart: always
    labels:
      org.fiware: 'bdataprj'
    image: mysql:${MYSQL_DB_VERSION}
    hostname: mysql-db
    container_name: db-mysql
    expose:
      - "${MYSQL_DB_PORT}"
    ports:
      - "${MYSQL_DB_PORT}:${MYSQL_DB_PORT}" # localhost:3306
    networks:
      default:
        ipv4_address: 172.18.5.6
    environment:
      - "MYSQL_ROOT_PASSWORD_FILE=/run/secrets/my_secret_data"
      - "MYSQL_ROOT_HOST=172.18.5.5" # Allow Keyrock to access this database
    volumes:
      - mysql-db:/var/lib/mysql
      #- ../mysql-data:/docker-entrypoint-initdb.d/:ro
    secrets:
      - my_secret_data



  mqtt:
    image: eclipse-mosquitto
    labels:
        org.fiware: 'bdataprj'
    hostname: mqtt
    container_name: fiware-mqtt
    volumes:
      - ./mosquitto/config:/mosquitto/config:rw
      - mqtt_data:/mosquitto/data/:rw
    expose:
      - 1883
      - 9002
    ports:
      - 1883:1883
      - 9002:9002
    networks:
      default:
        ipv4_address: 172.18.5.35

  iotagent-lora:
    image: ioeari/iotagent-lora
    container_name: fiware-iota-lora
    expose:
      - 6041
    ports:
      - 6041:4041
    labels:
        org.fiware: 'bdataprj'
    depends_on:
        - mongo-db
        - orion-ld
        - mqtt
    hostname: iotagent-lora
    entrypoint: bin/iotagent-lora docker/config-docker.js
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentlora # The name of the database used in mongoDB
      - IOTA_CB_NGSI_VERSION=ld # use NGSIv2 when sending updates for active attributes
      - IOTA_JSON_LD_CONTEXT=http://context/datamodels.context.jsonld
    networks:
      default:
        ipv4_address: 172.18.5.55

networks:
  default:
    labels:
      org.fiware: 'bdataprj'
    ipam:
      config:
        - subnet: 172.18.5.0/24
volumes:
  mysql-db: ~
  mongo-db: ~
  mongo-pe-db: ~
  mqtt_data: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models

secrets:
  my_secret_data:
    file: ../secrets.txt
